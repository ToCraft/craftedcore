buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.johnrengelman:shadow:8.+"
        classpath "net.darkhax.curseforgegradle:CurseForgeGradle:1.+"
        classpath "com.modrinth.minotaur:Minotaur:2.+"
    }
}

apply plugin: com.modrinth.minotaur.Minotaur
apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}


dependencies {
    modImplementation "net.fabricmc:fabric-loader:${parent.fabric_loader}"
    modApi "net.fabricmc.fabric-api:fabric-api:${parent.props.fabric}+${parent.name}"

    common(project(path: ":${parent.name}:common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":${parent.name}:common", configuration: "transformProductionFabric")) { transitive = false }
}

processResources {
    inputs.properties mod_meta

    filesMatching(["fabric.mod.json"]) {
        expand mod_meta + [project: project]
    }

    outputs.upToDateWhen { false }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("fabric-dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("fabric-dev")
}

sourcesJar {
    def commonSources = project(":${parent.name}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = parent.archivesBaseName + "-$project.name"
            version = parent.name + "-" + parent.mod_version
            from components.java
        }
    }
    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                name = "tocraftMavenPublic"
                url "https://maven.tocraft.dev/public"

                credentials {
                    username = "tocraft"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = parent.modrinth_id
    versionNumber = "$parent.name-$project.name-$project.version"
    versionType = "$parent.artifact_type"
    uploadFile = remapJar
    gameVersions = []
    loaders = ["fabric", "quilt"]
    changelog = releaseChangelog(1)
    dependencies {
        required.project "fabric-api"
        if (project.hasProperty("required_dependencies") && !project.getProperty("required_dependencies").isEmpty()) {
            project.getProperty("required_dependencies").split(',').each {
                required.project "${it}"
            }
        }
        if (project.hasProperty("optional_dependencies") && !project.getProperty("optional_dependencies").isEmpty()) {
            project.getProperty("optional_dependencies").split(',').each {
                optional.project "${it}"
            }
        }
    }

    parent.supported_versions.each { gameVersions.add(it.trim()) }
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    // The main file to upload
    def mainFile = upload("${parent.curseforge_id}".toString(), remapJar)
    mainFile.displayName = "$parent.name-$project.name-$project.version"
    mainFile.releaseType = "$parent.artifact_type"
    mainFile.changelog = releaseChangelog(1)
    mainFile.changelogType = "markdown"
    mainFile.addModLoader("fabric")
    mainFile.addModLoader("quilt")
    mainFile.addJavaVersion("Java ${parent.props.java}")
    mainFile.addRequirement("fabric-api")
    if (project.hasProperty("required_dependencies") && !project.getProperty("required_dependencies").isEmpty()) {
        project.getProperty("required_dependencies").split(',').each {
            mainFile.addRequirement("${it}")
        }
    }
    if (project.hasProperty("optional_dependencies") && !project.getProperty("optional_dependencies").isEmpty()) {
        project.getProperty("optional_dependencies").split(',').each {
            mainFile.addOptional("${it}")
        }
    }
    mainFile.withAdditionalFile(sourcesJar)
    mainFile.withAdditionalFile(jar)

    parent.supported_versions.each { mainFile.addGameVersion(it.trim()) }
}

loom {
    accessWidenerPath = project(":${parent.name}:common").loom.accessWidenerPath
}

dependencies {
    // mixin extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixinextras_version}")))
}